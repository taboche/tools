#!/usr/bin/env python3

import json
import os
import sys


def read_json_file(path):
    try:
        with open(path) as fd:
            return json.load(fd)
    except OSError as e:
        sys.exit(f"Failed to read {path}: {e}")
    except json.JSONDecodeError as e:
        sys.exit(f"Failed to parse {path}: {e}")


hardware = read_json_file(os.environ['MAAS_RESOURCES_FILE'])

# Sort disks by size in descending order
disks = sorted(hardware['resources']['storage']['disks'], key=lambda x: x['size'], reverse=True)

# Set boot disk as the first disk (smallest)
boot_disk = disks[0]

# Set scratch disk as the second disk (largest)
scratch_disk = disks[1]

cfg = {
    'layout': {
        boot_disk['id']: {
            'type': 'raid',
            'level': 1,
            'fs': 'xfs',
            'members': []
        },
        scratch_disk['id']: {
            'type': 'raid',
            'level': 1,
            'fs': 'xfs',
            'members': []
        },
    }
}

for disk in disks:
    id = disk['id']

    # skip virtual mounted drives from maas
    if 'Virtual' in disk['model'] or 'Virtual' in disk['device_id']:
        continue

    # if the device name ends in a number, add the 'p' partition suffix
    suffix = ''
    if id[-1:] in '0123456789':
        suffix = 'p'

    cfg['layout'][id] = {
        'type': 'disk',
        'ptable': 'gpt',
        'partitions': [
            {
                'name': id + suffix + '1',
                'size': '128M',
                'fs': 'vfat',
            },
            {
                'name': id + suffix + '2',
                'size': '1G'
            },
            {
                'name': id + suffix + '3',
                'size': '4G'
            },
            {
                'name': id + suffix + '4',
                'fs': 'xfs',
                'size': '100G'
            }
        ]
    }

    cfg['layout'][id]['boot'] = True if id == boot_disk['id'] else False

    cfg['layout']['boot']['members'].append(id + suffix + '2')
    cfg['layout']['swap']['members'].append(id + suffix + '3')

# Set boot device to the second partition of the boot disk
cfg['mounts'] = {
    '/': {
        'device': boot_disk['id'] + '2',
        'options': 'defaults,noatime'
    },
    '/boot': {
        'device': 'boot'
    },
    '/boot/efi': {
        'device': boot_disk['id'] + '1',
    }
}

cfg['layout'][boot_disk['id']]['partitions'][0]['bootable'] = True

print('writing custom storage layout to ' + os.environ['MAAS_RESOURCES_FILE'])
print(json.dumps(cfg, sort_keys=True, indent=2))

out = open(os.environ['MAAS_RESOURCES_FILE'], 'w')
out.write(json.dumps(cfg, sort_keys=True, indent=2))
out.close()
