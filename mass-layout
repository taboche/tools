#!/usr/bin/env python3


# 41-custom-storage-layout - set layout for system


# --- Start MAAS 1.0 script metadata ---
# name: 41-custom-storage-layout
# title: Set layout for system
# description: Set layout for system
# script_type: commissioning
# timeout: 60
# --- End MAAS 1.0 script metadata ---

import json
import os
import sys

# Function definitions
def read_json_file(path):
    try:
        with open(path) as fd:
            return json.load(fd)
    except OSError as e:
        sys.exit(f"Failed to read {path}: {e}")
    except json.JSONDecodeError as e:
        sys.exit(f"Failed to parse {path}: {e}")

# Load the hardware from the json in the MAAS_RESOURCES_FILE
#hardware = read_json_file(os.environ['MAAS_RESOURCES_FILE'])


cfg = '''{
  "layout": {
    "sda": {
      "type": "disk",
      "ptable": "gpt",
      "boot": true,
      "partitions": [
        { "name": "sda1", "fs": "vfat", "size": "1G", "bootable": true },
        { "name": "sda2", "fs": "ext4", "size": "100G" },
        { "name": "sda3", "fs": "swap", "size": "256G" }
      ]
    },
    "nvme0n1": {
      "type": "disk",
      "ptable": "gpt",
      "partitions": [
        { "name": "nvme0n1p1", "fs": "ext4", "size": "100G" }
      ]
    },
    "mounts": {
        "/": { "device": "sda2" },
        "/boot/efi": { "device": "sda1" },
        "/swap": { "device": "sda3" },
        "/SCRATCH": { "device": "nvme0n1p1" }
        
  }
}'''

# Load layoutDetail from the above structure
layoutDetail = json.loads(cfg)

# Output
#hardware["storage-extra"] = layoutDetail

#print('Saving custom storage layout to ' + os.environ['MAAS_RESOURCES_FILE'])
#print(json.dumps(hardware))

#with open(os.environ['MAAS_RESOURCES_FILE'], 'w') as fd:
#    json.dump(hardware, fd)





Traceback (most recent call last):
  File "/tmp/user_data.sh.tRDlPD/scripts/commissioning/41-custom-storage-layout", line 62, in <module>
    layoutDetail = json.loads(cfg)
  File "/usr/lib/python3.8/json/__init__.py", line 357, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.8/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.8/json/decoder.py", line 353, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting ',' delimiter: line 27 column 2 (char 674)


{'layout': {'sda': {'type': 'disk', 'ptable': 'gpt', 'boot': True, 'partitions': [{'name': 'sda1', 'fs': 'vfat', 'size': '1G', 'bootable': True}, {'name': 'sda2', 'fs': 'ext4', 'size': '100G'}, {'name': 'sda3', 'fs': 'swap', 'size': '256G'}]}, 'nvme0n1': {'type': 'disk', 'ptable': 'gpt', 'partitions': [{'name': 'nvme0n1p1', 'fs': 'ext4', 'size': '100G'}]}, 'mounts': {'/': {'device': 'sda2', 'options': 'noatime'}, '/boot/efi': {'device': 'sda1'}, '/swap': {'device': 'sda3'}, '/SCRATCH': {'device': 'nvme0n1p1'}}}}
Saving custom storage layout to /storage-config.json
Traceback (most recent call last):
  File "/tmp/user_data.sh.U1P86q/scripts/commissioning/41-custom-storage-layout", line 73, in <module>
    os.environ["MAAS_STORAGE_CONFIG_FILE"] = layoutDetail
  File "/usr/lib/python3.8/os.py", line 680, in __setitem__
    value = self.encodevalue(value)
  File "/usr/lib/python3.8/os.py", line 750, in encode
    raise TypeError("str expected, not %s" % type(value).__name__)
TypeError: str expected, not dict


{
  "layout": {
    "sda": {
      "type": "disk",
      "ptable": "gpt",
      "boot": true,
      "partitions": [
        { "name": "sda1", "fs": "vfat", "size": "1G", "bootable": true },
        { "name": "sda2", "fs": "ext4", "size": "100G" },
        { "name": "sda3", "fs": "swap", "size": "256G" }
      ]
    },
    "nvme0n1": {
      "type": "disk",
      "ptable": "gpt",
      "partitions": [
        { "name": "nvme0n1p1", "fs": "ext4", "size": "100G" }
      ]
    }
  },
  "mounts": {
    "/": { "device": "sda2" },
    "/boot/efi": { "device": "sda1" },
    "/swap": { "device": "sda3" },
    "/SCRATCH": { "device": "nvme0n1p1" }
  }
}





import os

def export_hw_resources_to_env():
    json_file_path = "hw_resources.json"
    env_variable_name = "MAAS_CUSTOM_RESOURCES"
    
    try:
        # Read the content of hw_resources.json
        with open(json_file_path, "r") as file:
            json_content = file.read()

        # Set the environment variable with the content of the JSON file
        os.environ[env_variable_name] = json_content

        print(f"Exported content of '{json_file_path}' to environment variable '{env_variable_name}'")

    except FileNotFoundError:
        print(f"Error: File '{json_file_path}' not found.")

# Call the function to export the JSON content to the environment variable
export_hw_resources_to_env()


[{'id': 'nvme0n1', 'device': '259:0', 'model': 'KCD6XLUL7T68', 'type': 'nvme', 'read_only': False, 'size': 7681501126656, 'removable': False, 'wwn': 'eui.00000000000000008ce38ee2073c7201', 'numa_node': 0, 'device_path': 'pci-0000:61:00.0-nvme-1', 'block_size': 4096, 'firmware_version': '0105', 'rpm': 0, 'serial': '7180A011T5Q8', 'device_id': 'nvme-eui.00000000000000008ce38ee2073c7201', 'partitions': [{'id': 'nvme0n1p1', 'device': '259:1', 'read_only': False, 'size': 7681499725824, 'partition': 1}]}, {'id': 'sda', 'device': '8:0', 'model': 'INTEL SSDSC2KB48', 'type': 'scsi', 'read_only': False, 'size': 480103981056, 'removable': True, 'numa_node': 0, 'device_path': 'pci-0000:47:00.0-ata-2', 'block_size': 4096, 'firmware_version': '0132', 'rpm': 0, 'serial': 'BTYF106500ZX480BGN', 'device_id': 'wwn-0x55cd2e41542b9da5', 'partitions': [{'id': 'sda1', 'device': '8:1', 'read_only': False, 'size': 536870912, 'partition': 1}, {'id': 'sda2', 'device': '8:2', 'read_only': False, 'size': 479565185024, 'partition': 2}]}]


